import asyncio
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command

from settings import settings
from game.session_manager import GameSessionsManager
from keyboards import create_game_keyboard

bot = Bot(token=settings['TOKEN'])
dp = Dispatcher()
router = Router()
dp.include_router(router)

session_manager = GameSessionsManager()

user_game_messages = {}


@router.message(Command('start'))
async def start_handler(msg: Message):
    await msg.answer(
        'üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!\n'
        '\n'
        '‚ñ∂Ô∏è –î–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play'
    )


@router.message(Command('play'))
async def play_handler(msg: Message):
    user_id = msg.from_user.id
    game_id = session_manager.add_to_queue(user_id)

    if game_id:
        game = session_manager.get_game(game_id)
        symbol = '‚ùå' if user_id == game.player_x else '‚≠ï'

        message = await msg.answer(
            f'–ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞!\n–í–∞—à —Å–∏–º–≤–æ–ª: {symbol}\n'
            f'–¢–µ–∫—É—â–∏–π —Ö–æ–¥: ‚ùå\nID –∏–≥—Ä—ã: {game_id}',
            reply_markup=create_game_keyboard(game_id)
        )

        user_game_messages[user_id] = message.message_id

        opponent_id = game.player_o if user_id == game.player_x else game.player_x
        opponent_symbol = '‚≠ï' if user_id == game.player_x else '‚ùå'

        try:
            opponent_message = await bot.send_message(
                opponent_id,
                f'–ò–≥—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞!\n–í–∞—à —Å–∏–º–≤–æ–ª: {opponent_symbol}\n'
                f'–¢–µ–∫—É—â–∏–π —Ö–æ–¥: ‚ùå\nID –∏–≥—Ä—ã: {game_id}',
                reply_markup=create_game_keyboard(game_id)
            )
            user_game_messages[opponent_id] = opponent_message.message_id

        except Exception as e:
            await msg.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞')
            print(f'Error notifying opponent: {e}')
    else:
        await msg.answer(
            '‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞...\n'
            '–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel'
        )


@router.message(Command('cancel'))
async def cancel_handler(msg: Message):
    user_id = msg.from_user.id
    if session_manager.remove_from_queue(user_id):
        await msg.answer('‚ùå –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω')
    else:
        await msg.answer('‚ùå –í—ã –Ω–µ –∏—â–µ—Ç–µ –∏–≥—Ä—É')


@router.callback_query(F.data.startswith('move:'))
async def move_handler(callback: CallbackQuery):
    try:
        _, game_id, row_str, col_str = callback.data.split(':')
        row, col = int(row_str), int(col_str)

        game = session_manager.get_game(game_id)
        if not game:
            await callback.answer('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', show_alert=True)
            return

        user_id = callback.from_user.id
        if user_id not in [game.player_x, game.player_o]:
            await callback.answer('–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã!', show_alert=True)
            return

        if game.make_move(user_id, row, col):
            board_state = game.board

            player_x_id = game.player_x
            player_o_id = game.player_o

            if game.game_over:
                if game.winner:
                    winner_text = '‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏ –≤—ã–∏–≥—Ä–∞–ª–∏!' if game.winner == player_x_id else '‚≠ï –ù–æ–ª–∏–∫–∏ –≤—ã–∏–≥—Ä–∞–ª–∏!'
                else:
                    winner_text = 'ü§ù –ù–∏—á—å—è!'

                for player_id in [player_x_id, player_o_id]:
                    try:
                        await bot.edit_message_text(
                            f'–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n{winner_text}\nID –∏–≥—Ä—ã: {game_id}',
                            chat_id=player_id,
                            message_id=user_game_messages[player_id],
                            reply_markup=create_game_keyboard(game_id, board_state)
                        )
                    except Exception as e:
                        print(f'Error updating message for {player_id}: {e}')

                if player_x_id in user_game_messages:
                    del user_game_messages[player_x_id]
                if player_o_id in user_game_messages:
                    del user_game_messages[player_o_id]
                session_manager.del_game(game_id)
            else:
                current_symbol = '‚ùå' if game.current_player == player_x_id else '‚≠ï'

                for player_id in [player_x_id, player_o_id]:
                    try:
                        await bot.edit_message_text(
                            f'–¢–µ–∫—É—â–∏–π —Ö–æ–¥: {current_symbol}\nID –∏–≥—Ä—ã: {game_id}',
                            chat_id=player_id,
                            message_id=user_game_messages[player_id],
                            reply_markup=create_game_keyboard(game_id, board_state)
                        )
                    except Exception as e:
                        print(f'Error updating message for {player_id}: {e}')

            await callback.answer()
        else:
            await callback.answer('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ö–æ–¥! –ù–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å –∏–ª–∏ –∫–ª–µ—Ç–∫–∞ –∑–∞–Ω—è—Ç–∞.', show_alert=True)

    except Exception as e:
        print(f'Error in move handler: {e}')
        await callback.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!', show_alert=True)


@router.message()
async def other_messages_handler(msg: Message):
    await msg.answer('‚ñ∂Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /play –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏!')


async def main():
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!')
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
